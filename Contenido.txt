Documentación:

Conceptos de Webpack
https://webpack.js.org/concepts/

- Entry
- Output
- Loaders
- Plugins
- Mode
- Browser Compatibility

1.  Tener instalado Node.js y NPM(Node Package Manager)
2.  Procedemos a instalar via node las dependencias
3.  Para eso inicializamos un proyecto de node.js con el siguiente comando:
        $ npm init

4.  Ingresamos los datos como ser:
    package name: configuracion_webpack
    description: Configuración de webpack
    keyword: webpack
    author: DanielCanaviri <canavirimenadaniel@gmail.com>
    license: (ISC) MIT
    ... por ultimo confirmamos con un yes

5.  Se podra observar que se crea una archivo llamado package.json, que llegaria a ser
    el archivo de configuración del proyecto.

6.  Ahora procedemos a instalar 2 dependencias muy importantes, las instalaremos como
    dependencias de desarrollo, porque solo las utilizaremos en la fase de desarrollo de la
    aplicación:
        1. webpack
        2. webpack-cli 
    El cli es la interfaz de linea de comandos que nos permitira ejecutar todos los comandos que
    vallamos utilizando en node.js.
    Para instalar estas dos dependecias utilizaremos el siguiente comando:
        $ npm i -D webpack webpack-cli

    Donde los prefijos "i" significa instalar y "-D" significa instalar como dependencias de desarrollo.

7.  Si observamos el archivo package.json se agregaron algunas lineas de código que son las 
    siguientes:

        "devDependencies": {
            "webpack": "^5.21.0",
            "webpack-cli": "^4.5.0"
        }

    Se genero un arbol de dependencias con el número de versión de webpack y de webpack-cli,
    la sintaxis es la de un objeto llamado devDependencies.

    Por otro lado se agrego un folder llamado node_modules que contiene dependencias asi como una archivo 
    llamado package-lock.json con la descripción del nombre de dependencias con las que contamos y sus 
    versiones.

8.  Perfecto ahora procederemos a crear un comando que ejecute webpack, nos ubicamos en el archivo
    package.json y agregamos lo siguiente donde esta el objeto scripts:

        "script": {
            "build": "webpack"
        },
    
    Ejecutamos en la terminal el siguiente comando 

        $ npm run build
    
    Esto me arrojara un WARNING y un ERROR
    El warning nos avisa que no especificamos un modo :

        WARNING in configuration
        The 'mode' option has not been set, webpack will fallback to 'production' for this value.

    
    y el error nos avisa que no se encontro el el directorio './src' :

        ERROR in main
        Module not found: Error: Can't resolve './src' in 'F:\WebPack-Configuración'
        resolve './src' in 'F:\WebPack-Configuración'
    
    asi que creemos la carpeta de nombre src en la raiz del proyecto y dentro de este un archivo
    llamado index.js.

    Luego hacemos una modificación en el archivo package.json indicando que el archivo principal tenga la siguiente
    ruta 'src/index.js', eso dentro la propiedad main del objeto package.json.

        "main": "index.js",
    
    En el archivo index.js ya se podria comenzar a escribir lineas de código, escribiremos lo siguiente : 

        (Input)

            let a = 20;
            let b = 30;
            let suma = a + b;

            console.log( suma );

    Tomar en cuenta que hasta el momento no creamos un archivo de configuración llamado webpack.config.js
    pero de todas formas igual funcionara.

    Procedemos a ejecutar en la consola el comando: 

        $ npm run build

    Como podemos observar el warning seguira saliendo ya que no seleccionamos el modo que se refiere al 
    modo de producción o modo de desarrollo.

    Pero el error ya no existe y se compilo con exito la configuración, donde si observamos se genero un folder
    llamado dist y dentro de este un archivo llamado main.js.

    Por tanto nuestro archivo que esta dentro el folder src llamado index.js sera nuestro Punto de Entrada y 
    el archivo main.js dentro del folder dist sera el Punto de Salida.

    En el archivo main.js observamos el código transpilado de nuestro index.js que se obsrva de la siguiente manera :

        (Output)

            console.log(50);
    ===================================================================================================================
    Modos de Webpack
    ===================================================================================================================
    Hacen referencia al ambiente para el cual webpack va preparar el build, que serian 2:
        - Ambiente de Desarrollo (dev)
        - Ambiente de Producción (build)
    Agregemos al comando build la bandera llamada --mode y especificamos que sera modo producción :

        "scripts": {
            "build": "webpack --mode production",
        }
    Agregemos al comando dev la bandera llamada --mode y especificamos que sera en modo desarrollo :

        "scripts": {
            "dev": "webpack --mode development",
        }

    Lo tendremos de esta manera dentro el package.json

        "scripts": {
            "dev" : "webpack --mode development",
            "build": "webpack --mode production"
        },

    Ahora escribimos el siguiente comando: 

        $ nmp run build 

    Con todo esto la configuración se ejecutara con exito en modo producción

        Mensaje visualizado en consola: 
        
        > configuracion_webpack@1.0.0 build F:\WebPack-Configuración
        > webpack --mode production

        asset main.js 16 bytes [compared for emit] [minimized] (name: main)
        ./src/index.js 75 bytes [built] [code generated]
        webpack 5.21.2 compiled successfully in 596 ms

    Ahora con el otro comando

        $ npm run dev

    Esto permitira compilar en modo desarrollo 

        Mensaje visualizado en consola:

        asset main.js 865 bytes [emitted] (name: main)
        ./src/index.js 75 bytes [built] [code generated]
        webpack 5.21.2 compiled successfully in 221 ms

    A diferencia de el modo dev que genera un código mas extenso, build nos genera una código minificado.
    El archivo generado en modo producción pesa menos y esta empaquetado para su despliegue.

    Hasta el momento no se creo un archivo de configuración webpack.config sin embargo esto no evito
    poder trabajar con webpack.

    ===================================================================================================================
    Diferentes puntos de entrada y salida desde la CLI
    ===================================================================================================================

    Nosotros podemos cambiar tanto el punto de entrada como el punto de salida y se lo puede realizar tambien
    desde la linea de comandos de webpack (webpack-cli) sin nesecidad de utilizar un archivo de configuración.



    
    



    
    






















https://www.udemy.com/course/build-social-network-in-20-days/?fbclid=IwAR2ZeOwwCOQ6B8HMjkQE6QJaW1qozBCHvIW8N5G9SIwiVL_MCGXmzifiduM&couponCode=SN_FEB_FREE